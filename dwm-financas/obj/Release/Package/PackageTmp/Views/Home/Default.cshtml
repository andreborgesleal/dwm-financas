@using DWM.Models.Repositories
@using App_Dominio.Models
@model HomeViewModel
@{
    DateTime Data1 = new DateTime(Funcoes.Brasilia().Year, Funcoes.Brasilia().Month, 1);
    DateTime Data2 = Funcoes.Brasilia().Date;

    #region Cobranca
    List<ContaReceberDemonstrativoViewModel> cr = (PagedList<ContaReceberDemonstrativoViewModel>)Model.Cobranca;

    decimal faturamento_mes = 0;
    decimal Titulos_EmAberto = 0;

    foreach (ContaReceberDemonstrativoViewModel rec in cr)
    {
        if (rec.OperacaoParcela.dt_ultima_amortizacao.HasValue && rec.OperacaoParcela.dt_ultima_amortizacao.Value >= Data1 && rec.OperacaoParcela.dt_ultima_amortizacao.Value <= Data2)
        {
            faturamento_mes += rec.OperacaoParcela.vr_amortizacao.Value;
        }
        if (rec.OperacaoParcela.situacao.Equals("Em aberto"))
        {
            Titulos_EmAberto += rec.OperacaoParcela.vr_saldo_devedor.Value;
        }

    }
    #endregion

    #region Pagamentos
    List<ContaPagarViewModel> cp = (PagedList<ContaPagarViewModel>)Model.Pagamentos;

    decimal pagamento_mes = 0;
    decimal pagamento_EmAberto = 0;

    foreach (ContaPagarViewModel pag in cp)
    {
        if (pag.OperacaoParcela.dt_ultima_amortizacao.HasValue && pag.OperacaoParcela.dt_ultima_amortizacao.Value >= Data1 && pag.OperacaoParcela.dt_ultima_amortizacao.Value <= Data2)
        {
            pagamento_mes += pag.OperacaoParcela.vr_amortizacao.Value;
        }
        if (pag.OperacaoParcela.situacao.Equals("Em aberto"))
        {
            pagamento_EmAberto += pag.OperacaoParcela.vr_saldo_devedor.Value;
        }

    }

    string[] dataPag;
    string[] dataVal1;
    decimal[] dataVal;


    if (((IEnumerable<ContaPagarViewModel>)Model.Pagamentos).Count() > 0)
    {
        dataPag = String.Join(",", (from fornecedor in (from pag in ((IEnumerable<ContaPagarViewModel>)Model.Pagamentos)
                                                        group pag by pag.nome_credor into PAG
                                                        select new { PAG.Key, valor = PAG.Sum(info => info.OperacaoParcela.vr_principal) })
                                    orderby fornecedor.valor descending
                                    select fornecedor.Key.Trim().Length >= 15 ? fornecedor.Key.Substring(0, 15) : fornecedor.Key).Take(5)).Split(',');

        dataVal1 = String.Join("|", (from fornecedor in (from pag in ((IEnumerable<ContaPagarViewModel>)Model.Pagamentos)
                                                         group pag by pag.nome_credor into PAG
                                                         select new { PAG.Key, valor = PAG.Sum(info => info.OperacaoParcela.vr_principal) })
                                     orderby fornecedor.valor descending
                                     select fornecedor.valor).Take(5)).Split('|');

        dataVal = new decimal[dataPag.Length];
        for (int i = 0; i <= dataVal1.Length - 1; i++)
        {
            dataVal[i] = decimal.Parse(dataVal1[i]);
        }
    }
    else
    {
        dataPag = new string[0];
        dataVal = new decimal[0];
        dataVal1 = new string[0];
    }

    #endregion
    }
<!-- Datatables -->
<link href="../Content/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet">
<script>
    var _Meses_Line = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
    var _Data_Line = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var _Header_Line = 'Contas a Pagar - ';
    var _ToolTips_line = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '];

    var labels = ['Contas a Pagar', 'Contas a Receber'];
    var cr = 0;
    var cp = 0;
    var data = [cp, cr];
</script>

<script src="~/Content/RGraph/libraries/RGraph.common.core.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.common.dynamic.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.common.tooltips.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.pie.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.drawing.background.js"></script>

<script src="~/Content/RGraph/libraries/RGraph.svg.common.core.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.svg.bar.js"></script>
<script src="~/Content/RGraph/libraries/RGraph.svg.common.tooltips.js"></script>

<div class="row" id="div-graph">
    <div class="col-md-8">
        <div style="padding: 15px">
            <div style="width: 750px; height: 300px" id="chart-container"></div>
        </div>
    </div>
    <div class="col-md-4">
        <canvas id="cvs_pie" width="350" height="250">
            [No canvas support]
        </canvas>
    </div>
</div>
<div id="div-list-static">
    @Html.Partial("ListPanorama", Model.Cobranca)
</div>

<div id="div-list-static">
    @Html.Partial("ListPanoramaPagamentoEmAberto", Model.Pagamentos)
</div>

<script>
    var aData = @Html.Raw(Json.Encode(dataVal.ToArray()));
    var aXaxisLabels = @Html.Raw(Json.Encode(dataPag.ToArray()));
    var toolTips = @Html.Raw(Json.Encode(dataVal1.ToArray()));

    new RGraph.SVG.Bar({
        id: 'chart-container',
        data: aData, 
        options: {
            xaxisLabels: aXaxisLabels, 
            tooltips: toolTips,
            gutterLeft: 100,
            textSize: 8,
            colorsSequential: true,
            yaxisUnitsPre: 'R$ ',
            yaxisDecimals: 2,
            yaxisPoint: ',',
            yaxisThousand: '.',
            yaxis: false,
            backgroundGridVlines: false,
            backgroundGridBorder: false,
            title: 'Contas a pagar por fornecedor (Top 5)'
        }
    }).grow();
</script>

<script>
    new RGraph.Pie({
        id: 'cvs_pie',
        data: data,
        options: {
            tooltips: labels,
            labels: labels,
            labelsSticksList: true,
            colors: ['rgb(255,0,0)', 'blue', 'rgb(0,255,0)', 'rgb(0,0,255)', 'rgb(255,255,0)', 'rgb(0,255,255)', 'red', 'pink', 'black', 'white'],
            shadow: false,
            strokestyle: 'rgba(0,0,0,0)',
            exploded: 0,
            textAccessible: true
        }
    }).roundRobin();
</script>

